import{X as g,_ as O,Q as it,B as C,r as le,H as P,j as ct,b as I,J as z,g as ue,d as v,v as T,e as Y,K as he,c as pt,S as Ct,t as D,Z as U,D as de,$ as ft,f as H,h as L,i as ce,k as G,l as R,m as St,R as st,o as N,P as F,p as M,N as nt,G as at,a as pe,Y as Pt,V as fe,q as ot,s as Ft,y as ge,w as me,u as Mt,x as Ut,z as xe,C as _e,A as Rt,E as ye,F as lt,I as be,L as ve,W as et,M as E,O as Te,a0 as A}from"./index-BKkIut0w.js";import{s as $,a as Bt,l as we,n as Ce}from"./colorToUniform-BXaCBwVl-B2XTwPI5.js";class kt{static init(t){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;this._cancelResize();let e,r;if(this._resizeTo===globalThis.window)e=globalThis.innerWidth,r=globalThis.innerHeight;else{const{clientWidth:i,clientHeight:s}=this._resizeTo;e=i,r=s}this.renderer.resize(e,r),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=t.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}kt.extension=g.Application;class Gt{static init(t){t=Object.assign({autoStart:!0,sharedTicker:!1},t),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,de.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=t.sharedTicker?ft.shared:new ft,t.autoStart&&this.start()}static destroy(){if(this._ticker){const t=this._ticker;this.ticker=null,t.destroy()}}}Gt.extension=g.Application;class Se extends pe{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return v(T,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return v(T,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return v(T,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return v(T,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return v(T,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(t=!1){var e;this.emit("destroy",this),this.removeAllListeners();for(const r in this.chars)(e=this.chars[r].texture)==null||e.destroy();this.chars=null,t&&(this.pages.forEach(r=>r.texture.destroy(!0)),this.pages=null)}}const At=class zt extends Se{constructor(t){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentMaxCharHeight=0,this._currentPageIndex=-1,this._skipKerning=!1;const e={...zt.defaultOptions,...t};this._textureSize=e.textureSize,this._mipmap=e.mipmap;const r=e.style.clone();e.overrideFill&&(r._fill.color=16777215,r._fill.alpha=1,r._fill.texture=P.WHITE,r._fill.fill=null),this.applyFillAsTint=e.overrideFill;const i=r.fontSize;r.fontSize=this.baseMeasurementFontSize;const s=ct(r);e.overrideSize?r._stroke&&(r._stroke.width*=this.baseRenderedFontSize/i):r.fontSize=this.baseRenderedFontSize=i,this._style=r,this._skipKerning=e.skipKerning??!1,this.resolution=e.resolution??1,this._padding=e.padding??4,e.textureStyle&&(this._textureStyle=e.textureStyle instanceof I?e.textureStyle:new I(e.textureStyle)),this.fontMetrics=z.measureFont(s),this.lineHeight=r.lineHeight||this.fontMetrics.fontSize||r.fontSize}ensureCharacters(t){var e,r;const i=z.graphemeSegmenter(t).filter(y=>!this._currentChars.includes(y)).filter((y,b,w)=>w.indexOf(y)===b);if(!i.length)return;this._currentChars=[...this._currentChars,...i];let s;this._currentPageIndex===-1?s=this._nextPage():s=this.pages[this._currentPageIndex];let{canvas:n,context:a}=s.canvasAndContext,l=s.texture.source;const u=this._style;let d=this._currentX,h=this._currentY,c=this._currentMaxCharHeight;const p=this.baseRenderedFontSize/this.baseMeasurementFontSize,x=this._padding*p;let m=!1;const _=n.width/this.resolution,f=n.height/this.resolution;for(let y=0;y<i.length;y++){const b=i[y],w=z.measureText(b,u,n,!1);w.lineHeight=w.height;const S=w.width*p,B=Math.ceil((u.fontStyle==="italic"?2:1)*S),ne=w.height*p,j=B+x*2,q=ne+x*2;if(m=!1,b!==`
`&&b!=="\r"&&b!=="	"&&b!==" "&&(m=!0,c=Math.ceil(Math.max(q,c))),d+j>_&&(h+=c,c=q,d=0,h+c>f)){l.update();const k=this._nextPage();n=k.canvasAndContext.canvas,a=k.canvasAndContext.context,l=k.texture.source,d=0,h=0,c=0}const ae=S/p-(((e=u.dropShadow)==null?void 0:e.distance)??0)-(((r=u._stroke)==null?void 0:r.width)??0);if(this.chars[b]={id:b.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:ae,kerning:{}},m){this._drawGlyph(a,w,d+x,h+x,p,u);const k=l.width*p,dt=l.height*p,oe=new ue(d/k*l.width,h/dt*l.height,j/k*l.width,q/dt*l.height);this.chars[b].texture=new P({source:l,frame:oe}),d+=Math.ceil(j)}}l.update(),this._currentX=d,this._currentY=h,this._currentMaxCharHeight=c,this._skipKerning&&this._applyKerning(i,a)}get pageTextures(){return v(T,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(t,e){const r=this._measureCache;for(let i=0;i<t.length;i++){const s=t[i];for(let n=0;n<this._currentChars.length;n++){const a=this._currentChars[n];let l=r[s];l||(l=r[s]=e.measureText(s).width);let u=r[a];u||(u=r[a]=e.measureText(a).width);let d=e.measureText(s+a).width,h=d-(l+u);h&&(this.chars[s].kerning[a]=h),d=e.measureText(s+a).width,h=d-(l+u),h&&(this.chars[a].kerning[s]=h)}}}_nextPage(){this._currentPageIndex++;const t=this.resolution,e=Y.getOptimalCanvasAndContext(this._textureSize,this._textureSize,t);this._setupContext(e.context,this._style,t);const r=t*(this.baseRenderedFontSize/this.baseMeasurementFontSize),i=new P({source:new he({resource:e.canvas,resolution:r,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})});this._textureStyle&&(i.source.style=this._textureStyle);const s={canvasAndContext:e,texture:i};return this.pages[this._currentPageIndex]=s,s}_setupContext(t,e,r){e.fontSize=this.baseRenderedFontSize,t.scale(r,r),t.font=ct(e),e.fontSize=this.baseMeasurementFontSize,t.textBaseline=e.textBaseline;const i=e._stroke,s=(i==null?void 0:i.width)??0;if(i&&(t.lineWidth=s,t.lineJoin=i.join,t.miterLimit=i.miterLimit,t.strokeStyle=pt(i,t)),e._fill&&(t.fillStyle=pt(e._fill,t)),e.dropShadow){const n=e.dropShadow,a=Ct.shared.setValue(n.color).toArray(),l=n.blur*r,u=n.distance*r;t.shadowColor=`rgba(${a[0]*255},${a[1]*255},${a[2]*255},${n.alpha})`,t.shadowBlur=l,t.shadowOffsetX=Math.cos(n.angle)*u,t.shadowOffsetY=Math.sin(n.angle)*u}else t.shadowColor="black",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0}_drawGlyph(t,e,r,i,s,n){const a=e.text,l=e.fontProperties,u=n._stroke,d=((u==null?void 0:u.width)??0)*s,h=r+d/2,c=i-d/2,p=l.descent*s,x=e.lineHeight*s;let m=!1;n.stroke&&d&&(m=!0,t.strokeText(a,h,c+x-p));const{shadowBlur:_,shadowOffsetX:f,shadowOffsetY:y}=t;n._fill&&(m&&(t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0),t.fillText(a,h,c+x-p)),m&&(t.shadowBlur=_,t.shadowOffsetX=f,t.shadowOffsetY=y)}destroy(){super.destroy();for(let t=0;t<this.pages.length;t++){const{canvasAndContext:e,texture:r}=this.pages[t];Y.returnCanvasAndContext(e),r.destroy(!0)}this.pages=null}};At.defaultOptions={textureSize:512,style:new O,mipmap:!0};let gt=At;function Dt(o,t,e,r){const i={width:0,height:0,offsetY:0,scale:t.fontSize/e.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};i.offsetY=e.baseLineOffset;let s=i.lines[0],n=null,a=!0;const l={width:0,start:0,index:0,positions:[],chars:[]},u=e.baseMeasurementFontSize/t.fontSize,d=t.letterSpacing*u,h=t.wordWrapWidth*u,c=t.lineHeight?t.lineHeight*u:e.lineHeight,p=t.wordWrap&&t.breakWords,x=f=>{const y=s.width;for(let b=0;b<l.index;b++){const w=f.positions[b];s.chars.push(f.chars[b]),s.charPositions.push(w+y)}s.width+=f.width,a=!1,l.width=0,l.index=0,l.chars.length=0},m=()=>{let f=s.chars.length-1;if(r){let y=s.chars[f];for(;y===" ";)s.width-=e.chars[y].xAdvance,y=s.chars[--f]}i.width=Math.max(i.width,s.width),s={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},a=!0,i.lines.push(s),i.height+=c},_=f=>f-d>h;for(let f=0;f<o.length+1;f++){let y;const b=f===o.length;b||(y=o[f]);const w=e.chars[y]||e.chars[" "];if(/(?:\s)/.test(y)||y==="\r"||y===`
`||b){if(!a&&t.wordWrap&&_(s.width+l.width)?(m(),x(l),b||s.charPositions.push(0)):(l.start=s.width,x(l),b||s.charPositions.push(0)),y==="\r"||y===`
`)s.width!==0&&m();else if(!b){const S=w.xAdvance+(w.kerning[n]||0)+d;s.width+=S,s.spaceWidth=S,s.spacesIndex.push(s.charPositions.length),s.chars.push(y)}}else{const S=w.kerning[n]||0,B=w.xAdvance+S+d;p&&_(s.width+l.width+B)&&(x(l),m()),l.positions[l.index++]=l.width+S,l.chars.push(y),l.width+=B}n=y}return m(),t.align==="center"?Pe(i):t.align==="right"?Fe(i):t.align==="justify"&&Me(i),i}function Pe(o){for(let t=0;t<o.lines.length;t++){const e=o.lines[t],r=o.width/2-e.width/2;for(let i=0;i<e.charPositions.length;i++)e.charPositions[i]+=r}}function Fe(o){for(let t=0;t<o.lines.length;t++){const e=o.lines[t],r=o.width-e.width;for(let i=0;i<e.charPositions.length;i++)e.charPositions[i]+=r}}function Me(o){const t=o.width;for(let e=0;e<o.lines.length;e++){const r=o.lines[e];let i=0,s=r.spacesIndex[i++],n=0;const a=r.spacesIndex.length,l=(t-r.width)/a;for(let u=0;u<r.charPositions.length;u++)u===s&&(s=r.spacesIndex[i++],n+=l),r.charPositions[u]+=n}}function Ue(o){if(o==="")return[];typeof o=="string"&&(o=[o]);const t=[];for(let e=0,r=o.length;e<r;e++){const i=o[e];if(Array.isArray(i)){if(i.length!==2)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${i.length}.`);if(i[0].length===0||i[1].length===0)throw new Error("[BitmapFont]: Invalid character delimiter.");const s=i[0].charCodeAt(0),n=i[1].charCodeAt(0);if(n<s)throw new Error("[BitmapFont]: Invalid character range.");for(let a=s,l=n;a<=l;a++)t.push(String.fromCharCode(a))}else t.push(...Array.from(i))}if(t.length===0)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}let W=0;class Re{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1,textureStyle:null}}getFont(t,e){var r;let i=`${e.fontFamily}-bitmap`,s=!0;if(e._fill.fill&&!e._stroke)i+=e._fill.fill.styleKey,s=!1;else if(e._stroke||e.dropShadow){let a=e.styleKey;a=a.substring(0,a.lastIndexOf("-")),i=`${a}-bitmap`,s=!1}if(!M.has(i)){const a=Object.create(e);a.lineHeight=0;const l=new gt({style:a,overrideFill:s,overrideSize:!0,...this.defaultOptions});W++,W>50&&at("BitmapText",`You have dynamically created ${W} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),l.once("destroy",()=>{W--,M.remove(i)}),M.set(i,l)}const n=M.get(i);return(r=n.ensureCharacters)==null||r.call(n,t),n}getLayout(t,e,r=!0){const i=this.getFont(t,e),s=z.graphemeSegmenter(t);return Dt(s,e,i,r)}measureText(t,e,r=!0){return this.getLayout(t,e,r)}install(...t){var e,r,i,s;let n=t[0];typeof n=="string"&&(n={name:n,style:t[1],chars:(e=t[2])==null?void 0:e.chars,resolution:(r=t[2])==null?void 0:r.resolution,padding:(i=t[2])==null?void 0:i.padding,skipKerning:(s=t[2])==null?void 0:s.skipKerning},v(T,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const a=n==null?void 0:n.name;if(!a)throw new Error("[BitmapFontManager] Property `name` is required.");n={...this.defaultOptions,...n};const l=n.style,u=l instanceof O?l:new O(l),d=n.dynamicFill??this._canUseTintForStyle(u),h=new gt({style:u,overrideFill:d,skipKerning:n.skipKerning,padding:n.padding,resolution:n.resolution,overrideSize:!1,textureStyle:n.textureStyle}),c=Ue(n.chars);return h.ensureCharacters(c.join("")),M.set(`${a}-bitmap`,h),h.once("destroy",()=>M.remove(`${a}-bitmap`)),h}uninstall(t){const e=`${t}-bitmap`,r=M.get(e);r&&r.destroy()}_canUseTintForStyle(t){return!t._stroke&&(!t.dropShadow||t.dropShadow.color===0)&&!t._fill.fill&&t._fill.color===16777215}}const Be=new Re;class Ot{constructor(t){this._renderer=t}push(t,e,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:e,filterEffect:t})}pop(t,e,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(t){t.action==="pushFilter"?this._renderer.filter.push(t):t.action==="popFilter"&&this._renderer.filter.pop()}destroy(){this._renderer=null}}Ot.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"filter"};function ke(o,t){t.clear();const e=t.matrix;for(let r=0;r<o.length;r++){const i=o[r];i.globalDisplayStatus<7||(t.matrix=i.worldTransform,t.addBounds(i.bounds))}return t.matrix=e,t}const Ge=new it({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:2*4,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class Ae{constructor(){this.skip=!1,this.inputTexture=null,this.backTexture=null,this.filters=null,this.bounds=new Pt,this.container=null,this.blendRequired=!1,this.outputRenderSurface=null,this.globalFrame={x:0,y:0,width:0,height:0}}}class It{constructor(t){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new G({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new St({}),this.renderer=t}get activeBackTexture(){var t;return(t=this._activeFilterData)==null?void 0:t.backTexture}push(t){const e=this.renderer,r=t.filterEffect.filters,i=this._pushFilterData();i.skip=!1,i.filters=r,i.container=t.container,i.outputRenderSurface=e.renderTarget.renderSurface;const s=e.renderTarget.renderTarget.colorTexture.source,n=s.resolution,a=s.antialias;if(r.length===0){i.skip=!0;return}const l=i.bounds;if(this._calculateFilterArea(t,l),this._calculateFilterBounds(i,e.renderTarget.rootViewPort,a,n,1),i.skip)return;const u=this._getPreviousFilterData(),d=this._findFilterResolution(n);let h=0,c=0;u&&(h=u.bounds.minX,c=u.bounds.minY),this._calculateGlobalFrame(i,h,c,d,s.width,s.height),this._setupFilterTextures(i,l,e,u)}generateFilteredTexture({texture:t,filters:e}){const r=this._pushFilterData();this._activeFilterData=r,r.skip=!1,r.filters=e;const i=t.source,s=i.resolution,n=i.antialias;if(e.length===0)return r.skip=!0,t;const a=r.bounds;if(a.addRect(t.frame),this._calculateFilterBounds(r,a.rectangle,n,s,0),r.skip)return t;const l=s;this._calculateGlobalFrame(r,0,0,l,i.width,i.height),r.outputRenderSurface=F.getOptimalTexture(a.width,a.height,r.resolution,r.antialias),r.backTexture=P.EMPTY,r.inputTexture=t,this.renderer.renderTarget.finishRenderPass(),this._applyFiltersToTexture(r,!0);const u=r.outputRenderSurface;return u.source.alphaMode="premultiplied-alpha",u}pop(){const t=this.renderer,e=this._popFilterData();e.skip||(t.globalUniforms.pop(),t.renderTarget.finishRenderPass(),this._activeFilterData=e,this._applyFiltersToTexture(e,!1),e.blendRequired&&F.returnTexture(e.backTexture),F.returnTexture(e.inputTexture))}getBackTexture(t,e,r){const i=t.colorTexture.source._resolution,s=F.getOptimalTexture(e.width,e.height,i,!1);let n=e.minX,a=e.minY;r&&(n-=r.minX,a-=r.minY),n=Math.floor(n*i),a=Math.floor(a*i);const l=Math.ceil(e.width*i),u=Math.ceil(e.height*i);return this.renderer.renderTarget.copyToTexture(t,s,{x:n,y:a},{width:l,height:u},{x:0,y:0}),s}applyFilter(t,e,r,i){const s=this.renderer,n=this._activeFilterData,a=n.outputRenderSurface===r,l=s.renderTarget.rootRenderTarget.colorTexture.source._resolution,u=this._findFilterResolution(l);let d=0,h=0;if(a){const c=this._findPreviousFilterOffset();d=c.x,h=c.y}this._updateFilterUniforms(e,r,n,d,h,u,a,i),this._setupBindGroupsAndRender(t,e,s)}calculateSpriteMatrix(t,e){const r=this._activeFilterData,i=t.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),s=e.worldTransform.copyTo(R.shared),n=e.renderGroup||e.parentRenderGroup;return n&&n.cacheToLocalTransform&&s.prepend(n.cacheToLocalTransform),s.invert(),i.prepend(s),i.scale(1/e.texture.orig.width,1/e.texture.orig.height),i.translate(e.anchor.x,e.anchor.y),i}destroy(){}_setupBindGroupsAndRender(t,e,r){if(r.renderPipes.uniformBatch){const i=r.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);this._globalFilterBindGroup.setResource(i,0)}else this._globalFilterBindGroup.setResource(this._filterGlobalUniforms,0);this._globalFilterBindGroup.setResource(e.source,1),this._globalFilterBindGroup.setResource(e.source.style,2),t.groups[0]=this._globalFilterBindGroup,r.encoder.draw({geometry:Ge,shader:t,state:t._state,topology:"triangle-list"}),r.type===nt.WEBGL&&r.renderTarget.finishRenderPass()}_setupFilterTextures(t,e,r,i){if(t.backTexture=P.EMPTY,t.blendRequired){r.renderTarget.finishRenderPass();const s=r.renderTarget.getRenderTarget(t.outputRenderSurface);t.backTexture=this.getBackTexture(s,e,i==null?void 0:i.bounds)}t.inputTexture=F.getOptimalTexture(e.width,e.height,t.resolution,t.antialias),r.renderTarget.bind(t.inputTexture,!0),r.globalUniforms.push({offset:e})}_calculateGlobalFrame(t,e,r,i,s,n){const a=t.globalFrame;a.x=e*i,a.y=r*i,a.width=s*i,a.height=n*i}_updateFilterUniforms(t,e,r,i,s,n,a,l){const u=this._filterGlobalUniforms.uniforms,d=u.uOutputFrame,h=u.uInputSize,c=u.uInputPixel,p=u.uInputClamp,x=u.uGlobalFrame,m=u.uOutputTexture;a?(d[0]=r.bounds.minX-i,d[1]=r.bounds.minY-s):(d[0]=0,d[1]=0),d[2]=t.frame.width,d[3]=t.frame.height,h[0]=t.source.width,h[1]=t.source.height,h[2]=1/h[0],h[3]=1/h[1],c[0]=t.source.pixelWidth,c[1]=t.source.pixelHeight,c[2]=1/c[0],c[3]=1/c[1],p[0]=.5*c[2],p[1]=.5*c[3],p[2]=t.frame.width*h[2]-.5*c[2],p[3]=t.frame.height*h[3]-.5*c[3];const _=this.renderer.renderTarget.rootRenderTarget.colorTexture;x[0]=i*n,x[1]=s*n,x[2]=_.source.width*n,x[3]=_.source.height*n,e instanceof P&&(e.source.resource=null);const f=this.renderer.renderTarget.getRenderTarget(e);this.renderer.renderTarget.bind(e,!!l),e instanceof P?(m[0]=e.frame.width,m[1]=e.frame.height):(m[0]=f.width,m[1]=f.height),m[2]=f.isRoot?-1:1,this._filterGlobalUniforms.update()}_findFilterResolution(t){let e=this._filterStackIndex-1;for(;e>0&&this._filterStack[e].skip;)--e;return e>0&&this._filterStack[e].inputTexture?this._filterStack[e].inputTexture.source._resolution:t}_findPreviousFilterOffset(){let t=0,e=0,r=this._filterStackIndex;for(;r>0;){r--;const i=this._filterStack[r];if(!i.skip){t=i.bounds.minX,e=i.bounds.minY;break}}return{x:t,y:e}}_calculateFilterArea(t,e){if(t.renderables?ke(t.renderables,e):t.filterEffect.filterArea?(e.clear(),e.addRect(t.filterEffect.filterArea),e.applyMatrix(t.container.worldTransform)):t.container.getFastGlobalBounds(!0,e),t.container){const r=(t.container.renderGroup||t.container.parentRenderGroup).cacheToLocalTransform;r&&e.applyMatrix(r)}}_applyFiltersToTexture(t,e){const r=t.inputTexture,i=t.bounds,s=t.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(t.backTexture.source,3),s.length===1)s[0].apply(this,r,t.outputRenderSurface,e);else{let n=t.inputTexture;const a=F.getOptimalTexture(i.width,i.height,n.source._resolution,!1);let l=a,u=0;for(u=0;u<s.length-1;++u){s[u].apply(this,n,l,!0);const d=n;n=l,l=d}s[u].apply(this,n,t.outputRenderSurface,e),F.returnTexture(a)}}_calculateFilterBounds(t,e,r,i,s){var n;const a=this.renderer,l=t.bounds,u=t.filters;let d=1/0,h=0,c=!0,p=!1,x=!1,m=!0;for(let _=0;_<u.length;_++){const f=u[_];if(d=Math.min(d,f.resolution==="inherit"?i:f.resolution),h+=f.padding,f.antialias==="off"?c=!1:f.antialias==="inherit"&&c&&(c=r),f.clipToViewport||(m=!1),!(f.compatibleRenderers&a.type)){x=!1;break}if(f.blendRequired&&!(((n=a.backBuffer)==null?void 0:n.useBackBuffer)??!0)){at("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),x=!1;break}x=f.enabled||x,p||(p=f.blendRequired)}if(!x){t.skip=!0;return}if(m&&l.fitBounds(0,e.width/i,0,e.height/i),l.scale(d).ceil().scale(1/d).pad((h|0)*s),!l.isPositive){t.skip=!0;return}t.antialias=c,t.resolution=d,t.blendRequired=p}_popFilterData(){return this._filterStackIndex--,this._filterStack[this._filterStackIndex]}_getPreviousFilterData(){let t,e=this._filterStackIndex-1;for(;e>1&&(e--,t=this._filterStack[e],!!t.skip););return t}_pushFilterData(){let t=this._filterStack[this._filterStackIndex];return t||(t=this._filterStack[this._filterStackIndex]=new Ae),this._filterStackIndex++,t}}It.extension={type:[g.WebGLSystem,g.WebGPUSystem],name:"filter"};class X extends Te{constructor(t){t instanceof A&&(t={context:t});const{context:e,roundPixels:r,...i}=t||{};super({label:"Graphics",...i}),this.renderPipeId="graphics",e?this._context=e:this._context=this._ownedContext=new A,this._context.on("update",this.onViewUpdate,this),this.didViewUpdate=!0,this.allowChildren=!1,this.roundPixels=r??!1}set context(t){t!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=t,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}updateBounds(){}containsPoint(t){return this._context.containsPoint(t)}destroy(t){this._ownedContext&&!t?this._ownedContext.destroy(t):(t===!0||(t==null?void 0:t.context)===!0)&&this._context.destroy(t),this._ownedContext=null,this._context=null,super.destroy(t)}_callContextMethod(t,e){return this.context[t](...e),this}setFillStyle(...t){return this._callContextMethod("setFillStyle",t)}setStrokeStyle(...t){return this._callContextMethod("setStrokeStyle",t)}fill(...t){return this._callContextMethod("fill",t)}stroke(...t){return this._callContextMethod("stroke",t)}texture(...t){return this._callContextMethod("texture",t)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...t){return this._callContextMethod("arc",t)}arcTo(...t){return this._callContextMethod("arcTo",t)}arcToSvg(...t){return this._callContextMethod("arcToSvg",t)}bezierCurveTo(...t){return this._callContextMethod("bezierCurveTo",t)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...t){return this._callContextMethod("ellipse",t)}circle(...t){return this._callContextMethod("circle",t)}path(...t){return this._callContextMethod("path",t)}lineTo(...t){return this._callContextMethod("lineTo",t)}moveTo(...t){return this._callContextMethod("moveTo",t)}quadraticCurveTo(...t){return this._callContextMethod("quadraticCurveTo",t)}rect(...t){return this._callContextMethod("rect",t)}roundRect(...t){return this._callContextMethod("roundRect",t)}poly(...t){return this._callContextMethod("poly",t)}regularPoly(...t){return this._callContextMethod("regularPoly",t)}roundPoly(...t){return this._callContextMethod("roundPoly",t)}roundShape(...t){return this._callContextMethod("roundShape",t)}filletRect(...t){return this._callContextMethod("filletRect",t)}chamferRect(...t){return this._callContextMethod("chamferRect",t)}star(...t){return this._callContextMethod("star",t)}svg(...t){return this._callContextMethod("svg",t)}restore(...t){return this._callContextMethod("restore",t)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...t){return this._callContextMethod("rotate",t)}scaleTransform(...t){return this._callContextMethod("scale",t)}setTransform(...t){return this._callContextMethod("setTransform",t)}transform(...t){return this._callContextMethod("transform",t)}translateTransform(...t){return this._callContextMethod("translate",t)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(t){this._context.fillStyle=t}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(t){this._context.strokeStyle=t}clone(t=!1){return t?new X(this._context.clone()):(this._ownedContext=null,new X(this._context))}lineStyle(t,e,r){v(T,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const i={};return t&&(i.width=t),e&&(i.color=e),r&&(i.alpha=r),this.context.strokeStyle=i,this}beginFill(t,e){v(T,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const r={};return t!==void 0&&(r.color=t),e!==void 0&&(r.alpha=e),this.context.fillStyle=r,this}endFill(){v(T,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const t=this.context.strokeStyle;return(t.width!==A.defaultStrokeStyle.width||t.color!==A.defaultStrokeStyle.color||t.alpha!==A.defaultStrokeStyle.alpha)&&this.context.stroke(),this}drawCircle(...t){return v(T,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",t)}drawEllipse(...t){return v(T,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",t)}drawPolygon(...t){return v(T,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",t)}drawRect(...t){return v(T,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",t)}drawRoundedRect(...t){return v(T,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",t)}drawStar(...t){return v(T,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",t)}}const Et=class Wt extends it{constructor(...t){let e=t[0]??{};e instanceof Float32Array&&(v(T,"use new MeshGeometry({ positions, uvs, indices }) instead"),e={positions:e,uvs:t[1],indices:t[2]}),e={...Wt.defaultOptions,...e};const r=e.positions||new Float32Array([0,0,1,0,1,1,0,1]);let i=e.uvs;i||(e.positions?i=new Float32Array(r.length):i=new Float32Array([0,0,1,0,1,1,0,1]));const s=e.indices||new Uint32Array([0,1,2,0,2,3]),n=e.shrinkBuffersToFit,a=new D({data:r,label:"attribute-mesh-positions",shrinkToFit:n,usage:U.VERTEX|U.COPY_DST}),l=new D({data:i,label:"attribute-mesh-uvs",shrinkToFit:n,usage:U.VERTEX|U.COPY_DST}),u=new D({data:s,label:"index-mesh-buffer",shrinkToFit:n,usage:U.INDEX|U.COPY_DST});super({attributes:{aPosition:{buffer:a,format:"float32x2",stride:2*4,offset:0},aUV:{buffer:l,format:"float32x2",stride:2*4,offset:0}},indexBuffer:u,topology:e.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(t){this.attributes.aPosition.buffer.data=t}get uvs(){return this.attributes.aUV.buffer.data}set uvs(t){this.attributes.aUV.buffer.data=t}get indices(){return this.indexBuffer.data}set indices(t){this.indexBuffer.data=t}};Et.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let ut=Et;const mt="http://www.w3.org/2000/svg",xt="http://www.w3.org/1999/xhtml";class Vt{constructor(){this.svgRoot=document.createElementNS(mt,"svg"),this.foreignObject=document.createElementNS(mt,"foreignObject"),this.domElement=document.createElementNS(xt,"div"),this.styleElement=document.createElementNS(xt,"style");const{foreignObject:t,svgRoot:e,styleElement:r,domElement:i}=this;t.setAttribute("width","10000"),t.setAttribute("height","10000"),t.style.overflow="hidden",e.appendChild(t),t.appendChild(r),t.appendChild(i),this.image=lt.get().createImage()}}let _t;function ze(o,t,e,r){r||(r=_t||(_t=new Vt));const{domElement:i,styleElement:s,svgRoot:n}=r;i.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${o}</div>`,i.setAttribute("style","transform-origin: top left; display: inline-block"),e&&(s.textContent=e),document.body.appendChild(n);const a=i.getBoundingClientRect();n.remove();const l=t.padding*2;return{width:a.width-l,height:a.height-l}}class De{constructor(){this.batches=[],this.batched=!1}destroy(){this.batches.forEach(t=>{L.return(t)}),this.batches.length=0}}class Yt{constructor(t,e){this.state=H.for2d(),this.renderer=t,this._adaptor=e,this.renderer.runners.contextChange.add(this)}contextChange(){this._adaptor.contextChange(this.renderer)}validateRenderable(t){const e=t.context,r=!!t._gpuData,i=this.renderer.graphicsContext.updateGpuContext(e);return!!(i.isBatchable||r!==i.isBatchable)}addRenderable(t,e){const r=this.renderer.graphicsContext.updateGpuContext(t.context);t.didViewUpdate&&this._rebuild(t),r.isBatchable?this._addToBatcher(t,e):(this.renderer.renderPipes.batch.break(e),e.add(t))}updateRenderable(t){const e=this._getGpuDataForRenderable(t).batches;for(let r=0;r<e.length;r++){const i=e[r];i._batcher.updateElement(i)}}execute(t){if(!t.isRenderable)return;const e=this.renderer,r=t.context;if(!e.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=t.groupBlendMode;const s=i.resources.localUniforms.uniforms;s.uTransformMatrix=t.groupTransform,s.uRound=e._roundPixels|t._roundPixels,$(t.groupColorAlpha,s.uColor,0),this._adaptor.execute(this,t)}_rebuild(t){const e=this._getGpuDataForRenderable(t),r=this.renderer.graphicsContext.updateGpuContext(t.context);e.destroy(),r.isBatchable&&this._updateBatchesForRenderable(t,e)}_addToBatcher(t,e){const r=this.renderer.renderPipes.batch,i=this._getGpuDataForRenderable(t).batches;for(let s=0;s<i.length;s++){const n=i[s];r.addToBatch(n,e)}}_getGpuDataForRenderable(t){return t._gpuData[this.renderer.uid]||this._initGpuDataForRenderable(t)}_initGpuDataForRenderable(t){const e=new De;return t._gpuData[this.renderer.uid]=e,e}_updateBatchesForRenderable(t,e){const r=t.context,i=this.renderer.graphicsContext.getGpuContext(r),s=this.renderer._roundPixels|t._roundPixels;e.batches=i.batches.map(n=>{const a=L.get(ce);return n.copyTo(a),a.renderable=t,a.roundPixels=s,a})}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null}}Yt.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"graphics"};const Ht=class Lt extends ut{constructor(...t){super({});let e=t[0]??{};typeof e=="number"&&(v(T,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),e={width:e,height:t[1],verticesX:t[2],verticesY:t[3]}),this.build(e)}build(t){t={...Lt.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const e=this.verticesX*this.verticesY,r=[],i=[],s=[],n=this.verticesX-1,a=this.verticesY-1,l=this.width/n,u=this.height/a;for(let h=0;h<e;h++){const c=h%this.verticesX,p=h/this.verticesX|0;r.push(c*l,p*u),i.push(c/n,p/a)}const d=n*a;for(let h=0;h<d;h++){const c=h%n,p=h/n|0,x=p*this.verticesX+c,m=p*this.verticesX+c+1,_=(p+1)*this.verticesX+c,f=(p+1)*this.verticesX+c+1;s.push(x,m,_,m,f,_)}this.buffers[0].data=new Float32Array(r),this.buffers[1].data=new Float32Array(i),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};Ht.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let Oe=Ht;class ht{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(t){this._topology=t}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(t){this.texture!==t&&(this.texture=t,this._textureMatrixUpdateId=-1)}get uvs(){const t=this.geometry.getBuffer("aUV"),e=t.data;let r=e;const i=this.texture.textureMatrix;return i.isSimple||(r=this._transformedUvs,(this._textureMatrixUpdateId!==i._updateID||this._uvUpdateId!==t._updateID)&&((!r||r.length<e.length)&&(r=this._transformedUvs=new Float32Array(e.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=t._updateID,i.multiplyUvs(e,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}class yt{destroy(){}}class Xt{constructor(t,e){this.localUniforms=new G({uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new St({0:this.localUniforms}),this.renderer=t,this._adaptor=e,this._adaptor.init()}validateRenderable(t){const e=this._getMeshData(t),r=e.batched,i=t.batched;if(e.batched=i,r!==i)return!0;if(i){const s=t._geometry;if(s.indices.length!==e.indexSize||s.positions.length!==e.vertexSize)return e.indexSize=s.indices.length,e.vertexSize=s.positions.length,!0;const n=this._getBatchableMesh(t);return n.texture.uid!==t._texture.uid&&(n._textureMatrixUpdateId=-1),!n._batcher.checkAndUpdateTexture(n,t._texture)}return!1}addRenderable(t,e){var r,i;const s=this.renderer.renderPipes.batch,n=this._getMeshData(t);if(t.didViewUpdate&&(n.indexSize=(r=t._geometry.indices)==null?void 0:r.length,n.vertexSize=(i=t._geometry.positions)==null?void 0:i.length),n.batched){const a=this._getBatchableMesh(t);a.setTexture(t._texture),a.geometry=t._geometry,s.addToBatch(a,e)}else s.break(e),e.add(t)}updateRenderable(t){if(t.batched){const e=this._getBatchableMesh(t);e.setTexture(t._texture),e.geometry=t._geometry,e._batcher.updateElement(e)}}execute(t){if(!t.isRenderable)return;t.state.blendMode=st(t.groupBlendMode,t.texture._source);const e=this.localUniforms;e.uniforms.uTransformMatrix=t.groupTransform,e.uniforms.uRound=this.renderer._roundPixels|t._roundPixels,e.update(),$(t.groupColorAlpha,e.uniforms.uColor,0),this._adaptor.execute(this,t)}_getMeshData(t){var e,r;return(e=t._gpuData)[r=this.renderer.uid]||(e[r]=new yt),t._gpuData[this.renderer.uid].meshData||this._initMeshData(t)}_initMeshData(t){return t._gpuData[this.renderer.uid].meshData={batched:t.batched,indexSize:0,vertexSize:0},t._gpuData[this.renderer.uid].meshData}_getBatchableMesh(t){var e,r;return(e=t._gpuData)[r=this.renderer.uid]||(e[r]=new yt),t._gpuData[this.renderer.uid].batchableMesh||this._initBatchableMesh(t)}_initBatchableMesh(t){const e=new ht;return e.renderable=t,e.setTexture(t._texture),e.transform=t.groupTransform,e.roundPixels=this.renderer._roundPixels|t._roundPixels,t._gpuData[this.renderer.uid].batchableMesh=e,e}destroy(){this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}Xt.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"mesh"};class Ie{execute(t,e){const r=t.state,i=t.renderer,s=e.shader||t.defaultShader;s.resources.uTexture=e.texture._source,s.resources.uniforms=t.localUniforms;const n=i.gl,a=t.getBuffers(e);i.shader.bind(s),i.state.set(r),i.geometry.bind(a.geometry,s.glProgram);const l=a.geometry.indexBuffer.data.BYTES_PER_ELEMENT===2?n.UNSIGNED_SHORT:n.UNSIGNED_INT;n.drawElements(n.TRIANGLES,e.particleChildren.length*6,l,0)}}class Ee{execute(t,e){const r=t.renderer,i=e.shader||t.defaultShader;i.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(t.localUniforms,!0),i.groups[1]=r.texture.getTextureBindGroup(e.texture);const s=t.state,n=t.getBuffers(e);r.encoder.draw({geometry:n.geometry,shader:e.shader||t.defaultShader,state:s,size:e.particleChildren.length*6})}}function bt(o,t=null){const e=o*6;if(e>65535?t||(t=new Uint32Array(e)):t||(t=new Uint16Array(e)),t.length!==e)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${e}`);for(let r=0,i=0;r<e;r+=6,i+=4)t[r+0]=i+0,t[r+1]=i+1,t[r+2]=i+2,t[r+3]=i+0,t[r+4]=i+2,t[r+5]=i+3;return t}function We(o){return{dynamicUpdate:vt(o,!0),staticUpdate:vt(o,!1)}}function vt(o,t){const e=[];e.push(`

        var index = 0;

        for (let i = 0; i < ps.length; ++i)
        {
            const p = ps[i];

            `);let r=0;for(const s in o){const n=o[s];if(t!==n.dynamic)continue;e.push(`offset = index + ${r}`),e.push(n.code);const a=et(n.format);r+=a.stride/4}e.push(`
            index += stride * 4;
        }
    `),e.unshift(`
        var stride = ${r};
    `);const i=e.join(`
`);return new Function("ps","f32v","u32v",i)}class Ve{constructor(t){this._size=0,this._generateParticleUpdateCache={};const e=this._size=t.size??1e3,r=t.properties;let i=0,s=0;for(const d in r){const h=r[d],c=et(h.format);h.dynamic?s+=c.stride:i+=c.stride}this._dynamicStride=s/4,this._staticStride=i/4,this.staticAttributeBuffer=new E(e*4*i),this.dynamicAttributeBuffer=new E(e*4*s),this.indexBuffer=bt(e);const n=new it;let a=0,l=0;this._staticBuffer=new D({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:U.VERTEX|U.COPY_DST}),this._dynamicBuffer=new D({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:U.VERTEX|U.COPY_DST});for(const d in r){const h=r[d],c=et(h.format);h.dynamic?(n.addAttribute(h.attributeName,{buffer:this._dynamicBuffer,stride:this._dynamicStride*4,offset:a*4,format:h.format}),a+=c.size):(n.addAttribute(h.attributeName,{buffer:this._staticBuffer,stride:this._staticStride*4,offset:l*4,format:h.format}),l+=c.size)}n.addIndex(this.indexBuffer);const u=this.getParticleUpdate(r);this._dynamicUpload=u.dynamicUpdate,this._staticUpload=u.staticUpdate,this.geometry=n}getParticleUpdate(t){const e=Ye(t);return this._generateParticleUpdateCache[e]?this._generateParticleUpdateCache[e]:(this._generateParticleUpdateCache[e]=this.generateParticleUpdate(t),this._generateParticleUpdateCache[e])}generateParticleUpdate(t){return We(t)}update(t,e){t.length>this._size&&(e=!0,this._size=Math.max(t.length,this._size*1.5|0),this.staticAttributeBuffer=new E(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new E(this._size*this._dynamicStride*4*4),this.indexBuffer=bt(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(t,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,t.length*this._dynamicStride*4,!0),e){const i=this.staticAttributeBuffer;this._staticUpload(t,i.float32View,i.uint32View),this._staticBuffer.setDataWithSize(i.float32View,t.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}function Ye(o){const t=[];for(const e in o){const r=o[e];t.push(e,r.code,r.dynamic?"d":"s")}return t.join("_")}var He=`varying vec2 vUV;
varying vec4 vColor;

uniform sampler2D uTexture;

void main(void){
    vec4 color = texture2D(uTexture, vUV) * vColor;
    gl_FragColor = color;
}`,Le=`attribute vec2 aVertex;
attribute vec2 aUV;
attribute vec4 aColor;

attribute vec2 aPosition;
attribute float aRotation;

uniform mat3 uTranslationMatrix;
uniform float uRound;
uniform vec2 uResolution;
uniform vec4 uColor;

varying vec2 vUV;
varying vec4 vColor;

vec2 roundPixels(vec2 position, vec2 targetSize)
{       
    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;
}

void main(void){
    float cosRotation = cos(aRotation);
    float sinRotation = sin(aRotation);
    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;
    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;

    vec2 v = vec2(x, y);
    v = v + aPosition;

    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    if(uRound == 1.0)
    {
        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
    }

    vUV = aUV;
    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;
}
`,Tt=`
struct ParticleUniforms {
  uProjectionMatrix:mat3x3<f32>,
  uColor:vec4<f32>,
  uResolution:vec2<f32>,
  uRoundPixels:f32,
};

@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;

@group(1) @binding(0) var uTexture: texture_2d<f32>;
@group(1) @binding(1) var uSampler : sampler;

struct VSOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) uv : vec2<f32>,
    @location(1) color : vec4<f32>,
  };
@vertex
fn mainVertex(
  @location(0) aVertex: vec2<f32>,
  @location(1) aPosition: vec2<f32>,
  @location(2) aUV: vec2<f32>,
  @location(3) aColor: vec4<f32>,
  @location(4) aRotation: f32,
) -> VSOutput {
  
   let v = vec2(
       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),
       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)
   ) + aPosition;

   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;

  return VSOutput(
   position,
   aUV,
   vColor,
  );
}

@fragment
fn mainFragment(
  @location(0) uv: vec2<f32>,
  @location(1) color: vec4<f32>,
  @builtin(position) position: vec4<f32>,
) -> @location(0) vec4<f32> {

    var sample = textureSample(uTexture, uSampler, uv) * color;
   
    return sample;
}`;class Xe extends ot{constructor(){const t=be.from({vertex:Le,fragment:He}),e=ve.from({fragment:{source:Tt,entryPoint:"mainFragment"},vertex:{source:Tt,entryPoint:"mainVertex"}});super({glProgram:t,gpuProgram:e,resources:{uTexture:P.WHITE.source,uSampler:new I({}),uniforms:{uTranslationMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Ct(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class $t{constructor(t,e){this.state=H.for2d(),this.localUniforms=new G({uTranslationMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=t,this.adaptor=e,this.defaultShader=new Xe,this.state=H.for2d()}validateRenderable(t){return!1}addRenderable(t,e){this.renderer.renderPipes.batch.break(e),e.add(t)}getBuffers(t){return t._gpuData[this.renderer.uid]||this._initBuffer(t)}_initBuffer(t){return t._gpuData[this.renderer.uid]=new Ve({size:t.particleChildren.length,properties:t._properties}),t._gpuData[this.renderer.uid]}updateRenderable(t){}execute(t){const e=t.particleChildren;if(e.length===0)return;const r=this.renderer,i=this.getBuffers(t);t.texture||(t.texture=e[0].texture);const s=this.state;i.update(e,t._childrenDirty),t._childrenDirty=!1,s.blendMode=st(t.blendMode,t.texture._source);const n=this.localUniforms.uniforms,a=n.uTranslationMatrix;t.worldTransform.copyTo(a),a.prepend(r.globalUniforms.globalUniformData.projectionMatrix),n.uResolution=r.globalUniforms.globalUniformData.resolution,n.uRound=r._roundPixels|t._roundPixels,$(t.groupColorAlpha,n.uColor,0),this.adaptor.execute(this,t)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class jt extends $t{constructor(t){super(t,new Ie)}}jt.extension={type:[g.WebGLPipes],name:"particle"};class qt extends $t{constructor(t){super(t,new Ee)}}qt.extension={type:[g.WebGPUPipes],name:"particle"};const Nt=class Kt extends Oe{constructor(t={}){t={...Kt.defaultOptions,...t},super({width:t.width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(t){var e,r;this.width=t.width??this.width,this.height=t.height??this.height,this._originalWidth=t.originalWidth??this._originalWidth,this._originalHeight=t.originalHeight??this._originalHeight,this._leftWidth=t.leftWidth??this._leftWidth,this._rightWidth=t.rightWidth??this._rightWidth,this._topHeight=t.topHeight??this._topHeight,this._bottomHeight=t.bottomHeight??this._bottomHeight,this._anchorX=(e=t.anchor)==null?void 0:e.x,this._anchorY=(r=t.anchor)==null?void 0:r.y,this.updateUvs(),this.updatePositions()}updatePositions(){const t=this.positions,{width:e,height:r,_leftWidth:i,_rightWidth:s,_topHeight:n,_bottomHeight:a,_anchorX:l,_anchorY:u}=this,d=i+s,h=e>d?1:e/d,c=n+a,p=r>c?1:r/c,x=Math.min(h,p),m=l*e,_=u*r;t[0]=t[8]=t[16]=t[24]=-m,t[2]=t[10]=t[18]=t[26]=i*x-m,t[4]=t[12]=t[20]=t[28]=e-s*x-m,t[6]=t[14]=t[22]=t[30]=e-m,t[1]=t[3]=t[5]=t[7]=-_,t[9]=t[11]=t[13]=t[15]=n*x-_,t[17]=t[19]=t[21]=t[23]=r-a*x-_,t[25]=t[27]=t[29]=t[31]=r-_,this.getBuffer("aPosition").update()}updateUvs(){const t=this.uvs;t[0]=t[8]=t[16]=t[24]=0,t[1]=t[3]=t[5]=t[7]=0,t[6]=t[14]=t[22]=t[30]=1,t[25]=t[27]=t[29]=t[31]=1;const e=1/this._originalWidth,r=1/this._originalHeight;t[2]=t[10]=t[18]=t[26]=e*this._leftWidth,t[9]=t[11]=t[13]=t[15]=r*this._topHeight,t[4]=t[12]=t[20]=t[28]=1-e*this._rightWidth,t[17]=t[19]=t[21]=t[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};Nt.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let $e=Nt;class je extends ht{constructor(){super(),this.geometry=new $e}destroy(){this.geometry.destroy()}}class Zt{constructor(t){this._renderer=t}addRenderable(t,e){const r=this._getGpuSprite(t);t.didViewUpdate&&this._updateBatchableSprite(t,r),this._renderer.renderPipes.batch.addToBatch(r,e)}updateRenderable(t){const e=this._getGpuSprite(t);t.didViewUpdate&&this._updateBatchableSprite(t,e),e._batcher.updateElement(e)}validateRenderable(t){const e=this._getGpuSprite(t);return!e._batcher.checkAndUpdateTexture(e,t._texture)}_updateBatchableSprite(t,e){e.geometry.update(t),e.setTexture(t._texture)}_getGpuSprite(t){return t._gpuData[this._renderer.uid]||this._initGPUSprite(t)}_initGPUSprite(t){const e=t._gpuData[this._renderer.uid]=new je,r=e;return r.renderable=t,r.transform=t.groupTransform,r.texture=t._texture,r.roundPixels=this._renderer._roundPixels|t._roundPixels,t.didViewUpdate||this._updateBatchableSprite(t,r),e}destroy(){this._renderer=null}}Zt.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"nineSliceSprite"};const qe={name:"tiling-bit",vertex:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`
            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;

            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;
        `},fragment:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`

            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);
            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;
            var unclamped = coord;
            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);

            var bias = 0.;

            if(unclamped.x == coord.x && unclamped.y == coord.y)
            {
                bias = -32.;
            }

            outColor = textureSampleBias(uTexture, uSampler, coord, bias);
        `}},Ne={name:"tiling-bit",vertex:{header:`
            uniform mat3 uTextureTransform;
            uniform vec4 uSizeAnchor;

        `,main:`
            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;

            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;
        `},fragment:{header:`
            uniform sampler2D uTexture;
            uniform mat3 uMapCoord;
            uniform vec4 uClampFrame;
            uniform vec2 uClampOffset;
        `,main:`

        vec2 coord = vUV + ceil(uClampOffset - vUV);
        coord = (uMapCoord * vec3(coord, 1.0)).xy;
        vec2 unclamped = coord;
        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);

        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0

        `}};let K,Z;class Ke extends ot{constructor(){K??(K=Ft({name:"tiling-sprite-shader",bits:[we,qe,Mt]})),Z??(Z=Ut({name:"tiling-sprite-shader",bits:[Ce,Ne,Rt]}));const t=new G({uMapCoord:{value:new R,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new R,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:Z,gpuProgram:K,resources:{localUniforms:new G({uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:t,uTexture:P.EMPTY.source,uSampler:P.EMPTY.source.style}})}updateUniforms(t,e,r,i,s,n){const a=this.resources.tilingUniforms,l=n.width,u=n.height,d=n.textureMatrix,h=a.uniforms.uTextureTransform;h.set(r.a*l/t,r.b*l/e,r.c*u/t,r.d*u/e,r.tx/t,r.ty/e),h.invert(),a.uniforms.uMapCoord=d.mapCoord,a.uniforms.uClampFrame=d.uClampFrame,a.uniforms.uClampOffset=d.uClampOffset,a.uniforms.uTextureTransform=h,a.uniforms.uSizeAnchor[0]=t,a.uniforms.uSizeAnchor[1]=e,a.uniforms.uSizeAnchor[2]=i,a.uniforms.uSizeAnchor[3]=s,n&&(this.resources.uTexture=n.source,this.resources.uSampler=n.source.style)}}class Ze extends ut{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}function Je(o,t){const e=o.anchor.x,r=o.anchor.y;t[0]=-e*o.width,t[1]=-r*o.height,t[2]=(1-e)*o.width,t[3]=-r*o.height,t[4]=(1-e)*o.width,t[5]=(1-r)*o.height,t[6]=-e*o.width,t[7]=(1-r)*o.height}function Qe(o,t,e,r){let i=0;const s=o.length/t,n=r.a,a=r.b,l=r.c,u=r.d,d=r.tx,h=r.ty;for(e*=t;i<s;){const c=o[e],p=o[e+1];o[e]=n*c+l*p+d,o[e+1]=a*c+u*p+h,e+=t,i++}}function tr(o,t){const e=o.texture,r=e.frame.width,i=e.frame.height;let s=0,n=0;o.applyAnchorToTexture&&(s=o.anchor.x,n=o.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-n,t[5]=t[7]=1-n;const a=R.shared;a.copyFrom(o._tileTransform.matrix),a.tx/=o.width,a.ty/=o.height,a.invert(),a.scale(o.width/r,o.height/i),Qe(t,2,0,a)}const V=new Ze;class er{constructor(){this.canBatch=!0,this.geometry=new ut({indices:V.indices.slice(),positions:V.positions.slice(),uvs:V.uvs.slice()})}destroy(){var t;this.geometry.destroy(),(t=this.shader)==null||t.destroy()}}class Jt{constructor(t){this._state=H.default2d,this._renderer=t}validateRenderable(t){const e=this._getTilingSpriteData(t),r=e.canBatch;this._updateCanBatch(t);const i=e.canBatch;if(i&&i===r){const{batchableMesh:s}=e;return!s._batcher.checkAndUpdateTexture(s,t.texture)}return r!==i}addRenderable(t,e){const r=this._renderer.renderPipes.batch;this._updateCanBatch(t);const i=this._getTilingSpriteData(t),{geometry:s,canBatch:n}=i;if(n){i.batchableMesh||(i.batchableMesh=new ht);const a=i.batchableMesh;t.didViewUpdate&&(this._updateBatchableMesh(t),a.geometry=s,a.renderable=t,a.transform=t.groupTransform,a.setTexture(t._texture)),a.roundPixels=this._renderer._roundPixels|t._roundPixels,r.addToBatch(a,e)}else r.break(e),i.shader||(i.shader=new Ke),this.updateRenderable(t),e.add(t)}execute(t){const{shader:e}=this._getTilingSpriteData(t);e.groups[0]=this._renderer.globalUniforms.bindGroup;const r=e.resources.localUniforms.uniforms;r.uTransformMatrix=t.groupTransform,r.uRound=this._renderer._roundPixels|t._roundPixels,$(t.groupColorAlpha,r.uColor,0),this._state.blendMode=st(t.groupBlendMode,t.texture._source),this._renderer.encoder.draw({geometry:V,shader:e,state:this._state})}updateRenderable(t){const e=this._getTilingSpriteData(t),{canBatch:r}=e;if(r){const{batchableMesh:i}=e;t.didViewUpdate&&this._updateBatchableMesh(t),i._batcher.updateElement(i)}else if(t.didViewUpdate){const{shader:i}=e;i.updateUniforms(t.width,t.height,t._tileTransform.matrix,t.anchor.x,t.anchor.y,t.texture)}}_getTilingSpriteData(t){return t._gpuData[this._renderer.uid]||this._initTilingSpriteData(t)}_initTilingSpriteData(t){const e=new er;return e.renderable=t,t._gpuData[this._renderer.uid]=e,e}_updateBatchableMesh(t){const e=this._getTilingSpriteData(t),{geometry:r}=e,i=t.texture.source.style;i.addressMode!=="repeat"&&(i.addressMode="repeat",i.update()),tr(t,r.uvs),Je(t,r.positions)}destroy(){this._renderer=null}_updateCanBatch(t){const e=this._getTilingSpriteData(t),r=t.texture;let i=!0;return this._renderer.type===nt.WEBGL&&(i=this._renderer.context.supports.nonPowOf2wrapping),e.canBatch=r.textureMatrix.isSimple&&(i||r.source.isPowerOfTwo),e.canBatch}}Jt.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"tilingSprite"};const rr={name:"local-uniform-msdf-bit",vertex:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32,
                uRound:f32,
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
        `,main:`
            vColor *= localUniforms.uColor;
            modelMatrix *= localUniforms.uTransformMatrix;
        `,end:`
            if(localUniforms.uRound == 1)
            {
                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);
            }
        `},fragment:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
         `,main:`
            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));
        `}},ir={name:"local-uniform-msdf-bit",vertex:{header:`
            uniform mat3 uTransformMatrix;
            uniform vec4 uColor;
            uniform float uRound;
        `,main:`
            vColor *= uColor;
            modelMatrix *= uTransformMatrix;
        `,end:`
            if(uRound == 1.)
            {
                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
            }
        `},fragment:{header:`
            uniform float uDistance;
         `,main:`
            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));
        `}},sr={name:"msdf-bit",fragment:{header:`
            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {

                // MSDF
                var median = msdfColor.r + msdfColor.g + msdfColor.b -
                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));

                // SDF
                median = min(median, msdfColor.a);

                var screenPxDistance = distance * (median - 0.5);
                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));
                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);
                var coverage: f32 = pow(shapeColor.a * alpha, gamma);

                return coverage;

            }
        `}},nr={name:"msdf-bit",fragment:{header:`
            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {

                // MSDF
                float median = msdfColor.r + msdfColor.g + msdfColor.b -
                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));

                // SDF
                median = min(median, msdfColor.a);

                float screenPxDistance = distance * (median - 0.5);
                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);

                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));
                float gamma = mix(1.0, 1.0 / 2.2, luma);
                float coverage = pow(shapeColor.a * alpha, gamma);

                return coverage;
            }
        `}};let J,Q;class ar extends ot{constructor(t){const e=new G({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new R,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}});J??(J=Ft({name:"sdf-shader",bits:[ge,me(t),rr,sr,Mt]})),Q??(Q=Ut({name:"sdf-shader",bits:[xe,_e(t),ir,nr,Rt]})),super({glProgram:Q,gpuProgram:J,resources:{localUniforms:e,batchSamplers:ye(t)}})}}class or extends X{destroy(){this.context.customShader&&this.context.customShader.destroy(),super.destroy()}}class Qt{constructor(t){this._renderer=t,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(t){const e=this._getGpuBitmapText(t);return this._renderer.renderPipes.graphics.validateRenderable(e)}addRenderable(t,e){const r=this._getGpuBitmapText(t);wt(t,r),t._didTextUpdate&&(t._didTextUpdate=!1,this._updateContext(t,r)),this._renderer.renderPipes.graphics.addRenderable(r,e),r.context.customShader&&this._updateDistanceField(t)}updateRenderable(t){const e=this._getGpuBitmapText(t);wt(t,e),this._renderer.renderPipes.graphics.updateRenderable(e),e.context.customShader&&this._updateDistanceField(t)}_updateContext(t,e){const{context:r}=e,i=Be.getFont(t.text,t._style);r.clear(),i.distanceField.type!=="none"&&(r.customShader||(r.customShader=new ar(this._renderer.limits.maxBatchableTextures)));const s=z.graphemeSegmenter(t.text),n=t._style;let a=i.baseLineOffset;const l=Dt(s,n,i,!0),u=n.padding,d=l.scale;let h=l.width,c=l.height+l.offsetY;n._stroke&&(h+=n._stroke.width/d,c+=n._stroke.width/d),r.translate(-t._anchor._x*h-u,-t._anchor._y*c-u).scale(d,d);const p=i.applyFillAsTint?n._fill.color:16777215;let x=i.fontMetrics.fontSize,m=i.lineHeight;n.lineHeight&&(x=n.fontSize/d,m=n.lineHeight/d);let _=(m-x)/2;_-i.baseLineOffset<0&&(_=0);for(let f=0;f<l.lines.length;f++){const y=l.lines[f];for(let b=0;b<y.charPositions.length;b++){const w=y.chars[b],S=i.chars[w];if(S!=null&&S.texture){const B=S.texture;r.texture(B,p||"black",Math.round(y.charPositions[b]+S.xOffset),Math.round(a+S.yOffset+_),B.orig.width,B.orig.height)}}a+=m}}_getGpuBitmapText(t){return t._gpuData[this._renderer.uid]||this.initGpuText(t)}initGpuText(t){const e=new or;return t._gpuData[this._renderer.uid]=e,this._updateContext(t,e),e}_updateDistanceField(t){const e=this._getGpuBitmapText(t).context,r=t._style.fontFamily,i=M.get(`${r}-bitmap`),{a:s,b:n,c:a,d:l}=t.groupTransform,u=Math.sqrt(s*s+n*n),d=Math.sqrt(a*a+l*l),h=(Math.abs(u)+Math.abs(d))/2,c=i.baseRenderedFontSize/t._style.fontSize,p=h*i.distanceField.range*(1/c);e.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){this._renderer=null}}Qt.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"bitmapText"};function wt(o,t){t.groupTransform=o.groupTransform,t.groupColorAlpha=o.groupColorAlpha,t.groupColor=o.groupColor,t.groupBlendMode=o.groupBlendMode,t.globalDisplayStatus=o.globalDisplayStatus,t.groupTransform=o.groupTransform,t.localDisplayStatus=o.localDisplayStatus,t.groupAlpha=o.groupAlpha,t._roundPixels=o._roundPixels}class lr extends Bt{constructor(t){super(),this.generatingTexture=!1,this._renderer=t,t.runners.resolutionChange.add(this)}resolutionChange(){const t=this.renderable;t._autoResolution&&t.onViewUpdate()}destroy(){this._renderer.htmlText.returnTexturePromise(this.texturePromise),this.texturePromise=null,this._renderer=null}}function rt(o,t){const{texture:e,bounds:r}=o,i=t._style._getFinalPadding();fe(r,t._anchor,e);const s=t._anchor._x*i*2,n=t._anchor._y*i*2;r.minX-=i-s,r.minY-=i-n,r.maxX-=i-s,r.maxY-=i-n}class te{constructor(t){this._renderer=t}validateRenderable(t){return t._didTextUpdate}addRenderable(t,e){const r=this._getGpuText(t);t._didTextUpdate&&(this._updateGpuText(t).catch(i=>{console.error(i)}),t._didTextUpdate=!1,rt(r,t)),this._renderer.renderPipes.batch.addToBatch(r,e)}updateRenderable(t){const e=this._getGpuText(t);e._batcher.updateElement(e)}async _updateGpuText(t){t._didTextUpdate=!1;const e=this._getGpuText(t);if(e.generatingTexture)return;e.texturePromise&&(this._renderer.htmlText.returnTexturePromise(e.texturePromise),e.texturePromise=null),e.generatingTexture=!0,t._resolution=t._autoResolution?this._renderer.resolution:t.resolution;const r=this._renderer.htmlText.getTexturePromise(t);e.texturePromise=r,e.texture=await r;const i=t.renderGroup||t.parentRenderGroup;i&&(i.structureDidChange=!0),e.generatingTexture=!1,rt(e,t)}_getGpuText(t){return t._gpuData[this._renderer.uid]||this.initGpuText(t)}initGpuText(t){const e=new lr(this._renderer);return e.renderable=t,e.transform=t.groupTransform,e.texture=P.EMPTY,e.bounds={minX:0,maxX:1,minY:0,maxY:0},e.roundPixels=this._renderer._roundPixels|t._roundPixels,t._resolution=t._autoResolution?this._renderer.resolution:t.resolution,t._gpuData[this._renderer.uid]=e,e}destroy(){this._renderer=null}}te.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"htmlText"};function ur(){const{userAgent:o}=lt.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(o)}const hr=new Pt;function ee(o,t,e,r){const i=hr;i.minX=0,i.minY=0,i.maxX=o.width/r|0,i.maxY=o.height/r|0;const s=F.getOptimalTexture(i.width,i.height,r,!1);return s.source.uploadMethodId="image",s.source.resource=o,s.source.alphaMode="premultiply-alpha-on-upload",s.frame.width=t/r,s.frame.height=e/r,s.source.emit("update",s.source),s.updateUvs(),s}function dr(o,t){const e=t.fontFamily,r=[],i={},s=/font-family:([^;"\s]+)/g,n=o.match(s);function a(l){i[l]||(r.push(l),i[l]=!0)}if(Array.isArray(e))for(let l=0;l<e.length;l++)a(e[l]);else a(e);n&&n.forEach(l=>{const u=l.split(":")[1].trim();a(u)});for(const l in t.tagStyles){const u=t.tagStyles[l].fontFamily;a(u)}return r}async function cr(o){const t=await(await lt.get().fetch(o)).blob(),e=new FileReader;return await new Promise((r,i)=>{e.onloadend=()=>r(e.result),e.onerror=i,e.readAsDataURL(t)})}async function pr(o,t){const e=await cr(t);return`@font-face {
        font-family: "${o.fontFamily}";
        font-weight: ${o.fontWeight};
        font-style: ${o.fontStyle};
        src: url('${e}');
    }`}const tt=new Map;async function fr(o){const t=o.filter(e=>M.has(`${e}-and-url`)).map(e=>{if(!tt.has(e)){const{entries:r}=M.get(`${e}-and-url`),i=[];r.forEach(s=>{const n=s.url,a=s.faces.map(l=>({weight:l.weight,style:l.style}));i.push(...a.map(l=>pr({fontWeight:l.weight,fontStyle:l.style,fontFamily:e},n)))}),tt.set(e,Promise.all(i).then(s=>s.join(`
`)))}return tt.get(e)});return(await Promise.all(t)).join(`
`)}function gr(o,t,e,r,i){const{domElement:s,styleElement:n,svgRoot:a}=i;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${o}</div>`,s.setAttribute("style",`transform: scale(${e});transform-origin: top left; display: inline-block`),n.textContent=r;const{width:l,height:u}=i.image;return a.setAttribute("width",l.toString()),a.setAttribute("height",u.toString()),new XMLSerializer().serializeToString(a)}function mr(o,t){const e=Y.getOptimalCanvasAndContext(o.width,o.height,t),{context:r}=e;return r.clearRect(0,0,o.width,o.height),r.drawImage(o,0,0),e}function xr(o,t,e){return new Promise(async r=>{e&&await new Promise(i=>setTimeout(i,100)),o.onload=()=>{r()},o.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,o.crossOrigin="anonymous"})}class re{constructor(t){this._renderer=t,this._createCanvas=t.type===nt.WEBGPU}getTexture(t){return this.getTexturePromise(t)}getTexturePromise(t){return this._buildTexturePromise(t)}async _buildTexturePromise(t){const{text:e,style:r,resolution:i,textureStyle:s}=t,n=L.get(Vt),a=dr(e,r),l=await fr(a),u=ze(e,r,l,n),d=Math.ceil(Math.ceil(Math.max(1,u.width)+r.padding*2)*i),h=Math.ceil(Math.ceil(Math.max(1,u.height)+r.padding*2)*i),c=n.image,p=2;c.width=(d|0)+p,c.height=(h|0)+p;const x=gr(e,r,i,l,n);await xr(c,x,ur()&&a.length>0);const m=c;let _;this._createCanvas&&(_=mr(c,i));const f=ee(_?_.canvas:m,c.width-p,c.height-p,i);return s&&(f.source.style=s),this._createCanvas&&(this._renderer.texture.initSource(f.source),Y.returnCanvasAndContext(_)),L.return(n),f}returnTexturePromise(t){t.then(e=>{this._cleanUp(e)}).catch(()=>{at("HTMLTextSystem: Failed to clean texture")})}_cleanUp(t){F.returnTexture(t,!0),t.source.resource=null,t.source.uploadMethodId="unknown"}destroy(){this._renderer=null}}re.extension={type:[g.WebGLSystem,g.WebGPUSystem,g.CanvasSystem],name:"htmlText"};class _r extends Bt{constructor(t){super(),this._renderer=t,t.runners.resolutionChange.add(this)}resolutionChange(){const t=this.renderable;t._autoResolution&&t.onViewUpdate()}destroy(){this._renderer.canvasText.returnTexture(this.texture),this._renderer=null}}class ie{constructor(t){this._renderer=t}validateRenderable(t){return t._didTextUpdate}addRenderable(t,e){const r=this._getGpuText(t);t._didTextUpdate&&(this._updateGpuText(t),t._didTextUpdate=!1),this._renderer.renderPipes.batch.addToBatch(r,e)}updateRenderable(t){const e=this._getGpuText(t);e._batcher.updateElement(e)}_updateGpuText(t){const e=this._getGpuText(t);e.texture&&this._renderer.canvasText.returnTexture(e.texture),t._resolution=t._autoResolution?this._renderer.resolution:t.resolution,e.texture=this._renderer.canvasText.getTexture(t),rt(e,t)}_getGpuText(t){return t._gpuData[this._renderer.uid]||this.initGpuText(t)}initGpuText(t){const e=new _r(this._renderer);return e.renderable=t,e.transform=t.groupTransform,e.bounds={minX:0,maxX:1,minY:0,maxY:0},e.roundPixels=this._renderer._roundPixels|t._roundPixels,t._gpuData[this._renderer.uid]=e,e}destroy(){this._renderer=null}}ie.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"text"};class se{constructor(t){this._renderer=t}getTexture(t,e,r,i){typeof t=="string"&&(v("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),t={text:t,style:r,resolution:e}),t.style instanceof O||(t.style=new O(t.style)),t.textureStyle instanceof I||(t.textureStyle=new I(t.textureStyle)),typeof t.text!="string"&&(t.text=t.text.toString());const{text:s,style:n,textureStyle:a}=t,l=t.resolution??this._renderer.resolution,{frame:u,canvasAndContext:d}=N.getCanvasAndContext({text:s,style:n,resolution:l}),h=ee(d.canvas,u.width,u.height,l);if(a&&(h.source.style=a),n.trim&&(u.pad(n.padding),h.frame.copyFrom(u),h.frame.scale(1/l),h.updateUvs()),n.filters){const c=this._applyFilters(h,n.filters);return this.returnTexture(h),N.returnCanvasAndContext(d),c}return this._renderer.texture.initSource(h._source),N.returnCanvasAndContext(d),h}returnTexture(t){const e=t.source;e.resource=null,e.uploadMethodId="unknown",e.alphaMode="no-premultiply-alpha",F.returnTexture(t,!0)}renderTextToCanvas(){v("8.10.0","CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead")}_applyFilters(t,e){const r=this._renderer.renderTarget.renderTarget,i=this._renderer.filter.generateFilteredTexture({texture:t,filters:e});return this._renderer.renderTarget.bind(r,!1),i}destroy(){this._renderer=null}}se.extension={type:[g.WebGLSystem,g.WebGPUSystem,g.CanvasSystem],name:"canvasText"};C.add(kt);C.add(Gt);C.add(Yt);C.add(le);C.add(Xt);C.add(jt);C.add(qt);C.add(se);C.add(ie);C.add(Qt);C.add(re);C.add(te);C.add(Jt);C.add(Zt);C.add(It);C.add(Ot);
